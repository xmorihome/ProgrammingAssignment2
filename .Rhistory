}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x
m <- solve(data)
# x$setinverse(m)
m
}
a
b
cacheSolve(a)
b <- matrix()
b
a
b <- NULL
a
b
cacheSolve(a)
cacheSolve(b)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<-solve
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x
m <- solve(data)
x$setinverse(m)
m
}
a
b
makeCacheMatrix(a)
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<-solve
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
a
b
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<-solve
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x.getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
a
b
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<-solve
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- makeCacheMatrix.getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<-solve
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- makeCacheMatrix()$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<-solve
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- makeCacheMatrix()$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- makeCacheMatrix()$get()
m <- solve(data)
makeCacheMatrix()$setinverse(m)
m
}
cacheSolve(a)
a
cacheSolve(b)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<-solve
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- makeCacheMatrix(x)$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- makeCacheMatrix(x)$get()
m <- solve(data)
makeCacheMatrix(x)$setinverse(m)
m
}
cacheSolve(b)
cacheSolve(a)
makeCacheMatrix(a)
cacheSolve(a)
makeCacheMatrix(b)
a
cacheSolve(a)
b <- cacheSolve(a)
a
b
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<-solve
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- makeCacheMatrix(x)$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- makeCacheMatrix(x)$get()
m <- solve(data)
makeCacheMatrix()$setinverse(m)
m
}
a
b
b <- NULL
a
b
cacheSolve(a)
cacheSolve(b)
cacheSolve(a)
m
getinverse <- function() m
getinverse <- function() m
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
get <- function() {return(x)}
set <- function(y) {
x <- y
inverse <- NULL
}
setinverse <- function(matriz) inverse <- matriz
getinverse <- function() inverse
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- makeCacheMatrix(x)$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- makeCacheMatrix(x)$get()
inverse <- solve(data)
makeCacheMatrix(x)$setinverse(inverse)
inverse
}
a
b
cacheSolve(a)
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
get <- function() {return(x)}
set <- function(y) {
x <- y
inverse <- NULL
}
setinverse <- function(matriz) inverse <- matriz
getinverse <- function() inverse
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- makeCacheMatrix(x)$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
} else {
message("calculating inverse")
data <- makeCacheMatrix(x)$get()
inverse <- solve(data)
makeCacheMatrix(x)$setinverse(inverse)
inverse
}
}
cacheSolve(a)
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
get <- function() {return(x)}
set <- function(y) {
x <- y
inverse <- NULL
}
setinverse <- function(matriz) inverse <- matriz
getinverse <- function() inverse
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
} else {
message("calculating inverse")
data <- makeCacheMatrix(x)$get()
inverse <- solve(data)
makeCacheMatrix(x)$setinverse(inverse)
inverse
}
}
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
get <- function() {return(x)}
set <- function(y) {
x <- y
inverse <- NULL
}
setinverse <- function(matriz) inverse <- matriz
getinverse <- function() inverse
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x()$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
} else {
message("calculating inverse")
data <- makeCacheMatrix(x)$get()
inverse <- solve(data)
makeCacheMatrix(x)$setinverse(inverse)
inverse
}
}
cacheSolve(a)
makeCacheMatrix(a)
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
get <- function() {return(x)}
set <- function(y) {
x <- y
inverse <- NULL
}
setinverse <- function(matriz) inverse <- matriz
getinverse <- function() inverse
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- makeCacheMatrix(x)$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
} else {
message("calculating inverse")
data <- makeCacheMatrix(x)$get()
inverse <- solve(data)
makeCacheMatrix(x)$setinverse(inverse)
inverse
}
}
a
makeCacheMatrix(a)
cacheSolve(a)
cacheSolve(a)
makeCacheMatrix(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
get <- function() {return(x)}
set <- function(y) {
x <- y
inverse <- NULL
}
setinverse <- function(matriz) inverse <- matriz
getinverse <- function() inverse
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
} else {
message("calculating inverse")
data <- makeCacheMatrix(x)$get()
inverse <- solve(data)
makeCacheMatrix(x)$setinverse(inverse)
inverse
}
}
makeCacheMatrix(a)
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
get <- function() {return(x)}
set <- function(y) {
x <- y
inverse <- NULL
}
setinverse <- function(matriz) inverse <- matriz
getinverse <- function() inverse
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
} else {
data <- makeCacheMatrix(x)$get()
inverse <- solve(data)
makeCacheMatrix(x)$setinverse(inverse)
inverse
}
}
inverse
makeCacheMatrix(a)
inverse
makeCacheMatrix(a)
get(a)
getinverse(a)
getinverse()
set(a)
makeCacheMatrix(a)$set(b)
inverse
a
b
y <- 10
f <- function(x) {y<-2}
f <- function(x) {y<-2; y^2 + g(x)}
g <- function(x) {x*y}
f(3)
